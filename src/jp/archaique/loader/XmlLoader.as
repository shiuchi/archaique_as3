package jp.archaique.loader{	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.events.SecurityErrorEvent;	import flash.net.URLLoader;	import flash.net.URLLoaderDataFormat;	import flash.net.URLRequest;	public class XmlLoader extends EventDispatcher implements ILoader	{				private var _loader:URLLoader;		private var _data:*;		private var _xml:XML;		private var _request:URLRequest;						public function XmlLoader(_request:URLRequest=null)		{						this._request=_request;			_loader=new URLLoader(); 			_loader.dataFormat = URLLoaderDataFormat.TEXT;					}				//------------------------------------------------------		//	getter		//-------------------------------------------------------				public function get data():*		{			return _data;		}				public function get xml():XML		{			return _xml;		}				public function get loader():URLLoader		{			return _loader;		}				public function get request():URLRequest		{			return _request;		}				//------------------------------------------------------		//	setter		//-------------------------------------------------------				public function set request(value:URLRequest):void		{			_request=value;		}				//------------------------------------------------------		//	public		//-------------------------------------------------------				public function load():void		{			_loader.addEventListener(Event.COMPLETE, onLoadComplete);			_loader.addEventListener(ProgressEvent.PROGRESS,onLoadProgress);			_loader.addEventListener(IOErrorEvent.IO_ERROR,onLoadError);			_loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecuryError);				_loader.load(_request);		}				public function close():void		{			_loader.close();		}				public function kill():void		{			_loader.removeEventListener(ProgressEvent.PROGRESS,onLoadProgress);			_loader.removeEventListener(Event.COMPLETE, onLoadComplete);			_loader.removeEventListener(IOErrorEvent.IO_ERROR,onLoadError);			_loader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecuryError);						_request=null;			_loader=null;			_xml=null;			_data=null;					}				//------------------------------------------------------		//	private		//-------------------------------------------------------				private function onLoadProgress(event:ProgressEvent):void		{			dispatchEvent(event);		}				private function onLoadComplete(event:Event):void		{			_data=_loader.data;			_xml=new XML(_loader.data);			dispatchEvent(event);		}					private function onLoadError(event:IOErrorEvent):void		{			_loader.close();			dispatchEvent(event);		}				private function onSecuryError(event:SecurityErrorEvent):void		{			_loader.close();			dispatchEvent(event);		}					}}